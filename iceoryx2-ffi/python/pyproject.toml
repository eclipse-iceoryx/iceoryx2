[project]
name = "iceoryx2"
version = "0.7.0"
description = "Lock-Free Zero-Copy Inter-process Communication"
readme = "README.md"
requires-python = ">=3.11,<4.0"
license = "Apache-2.0 OR MIT"
keywords = ["ipc", "inter-process communication", "zero-copy", "shared memory", "publish-subscribe", "request-response", "event"]
authors = [
  {name = "Contributors of eclipse-iceoryx"}
]
classifiers = [
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Intended Audience :: Developers",
    "Development Status :: 4 - Beta",
    "Topic :: System :: Networking",
    "License :: OSI Approved :: Apache Software License",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: POSIX :: BSD :: FreeBSD",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
]

[project.optional-dependencies]
test = [
  "pytest"
]

[project.urls]
homepage = "https://iceoryx.io"
documentation = "https://ekxide.github.io/iceoryx2-book"
repository = "https://github.com/eclipse-iceoryx/iceoryx2"
changelog = "https://github.com/eclipse-iceoryx/iceoryx2/blob/main/CHANGELOG.md"

[build-system]
requires = ["maturin>=1.8,<2.0"]
build-backend = "maturin"

[tool.maturin]
features = ["pyo3/extension-module"]
python-source = "python-src"
bindings = "pyo3"
module-name = "iceoryx2._iceoryx2"
manifest-path = "Cargo.toml"
target-dir = "../../target/ff/python"

[tool.poetry]
packages = [{include = "iceoryx2", from = "python-src"}]

[tool.poetry.dependencies]
python = ">=3.11,<4.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4.1"
prospector = {extras = ["with_mypy"], version = "^1.17.2"}
black = "^25.1.0"
isort = "^6.0.1"
bandit = "^1.8.6"
maturin = "^1.9.1"
twine = "^6.2.0"
build = "^1.3.0"
wheel = "^0.45.1"

[tool.poetry.requires-plugins]
poethepoet = { version = "~0.35.0", extras = ["poetry_plugin"]}

[tool.poe]
poetry_command = ""

[tool.poe.tasks.build-into-venv]
shell = "maturin develop --manifest-path Cargo.toml --target-dir ../../target/ff/python"

[tool.poe.tasks.build-sdist]
shell = "python -m build --sdist --outdir ../../target/ff/python/dist"

[tool.poe.tasks.build-wheel]
shell = "maturin build --release --target-dir ../../target/ff/python --out ../../target/ff/python/dist"

[tool.poe.tasks.upload-dist]
shell = "twine upload ${dist}/* -r ${repo}"
args = [
  { name = "dist", help = "Path to dist directory", default = "dist" },
  { name = "repo", help = "Repository to upload to (pypi-personal, pypi-org, etc.)", default = "pypi-personal" }
]

[tool.poe.tasks.check-imports]
sequence = [
    { shell = "isort --check-only ../../examples/python" },
    { shell = "isort --check-only python-src/iceoryx2" },
    { shell = "isort --check-only tests" },
]
[tool.poe.tasks.check-formatting]
sequence = [
    { shell = "black --check ../../examples/python" },
    { shell = "black --check python-src/iceoryx2" },  
    { shell = "black --check tests" },
]
[tool.poe.tasks.check-linting]
sequence = [
    { shell = "prospector -m -D -T -s veryhigh -F --profile ../../.prospector-iceoryx2.yaml python-src/iceoryx2" },
    { shell = "prospector -m -D -T -s veryhigh -F --profile ../../.prospector-tests.yaml tests" },

    # Need to loop through all directories otherwise `mypy` treats the examples directory as a single project
    # This is just a temporary fix - eventually it might make sense to make each example it's own pyproject which imports iceoryx2
    { shell = "for dir in ../../examples/python/*/; do echo \"Linting $dir\"; prospector -m -D -T -s veryhigh -F --profile ../../.prospector.yaml \"$dir\" || exit 1; done" },
]

[tool.poe.tasks.static-analysis]
sequence = [
    "check-imports",
    "check-formatting", 
    "check-linting"
]

[tool.poe.tasks.test]
shell = "pytest tests/*"

[tool.poe.tasks.fix-imports]
sequence = [
    { shell = "isort ../../examples/python" },
    { shell = "isort python-src/iceoryx2" },
    { shell = "isort tests" },
]
[tool.poe.tasks.fix-formatting]
sequence = [
    { shell = "black ../../examples/python" },
    { shell = "black python-src/iceoryx2" },
    { shell = "black tests" },
]

